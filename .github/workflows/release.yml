name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'  # Match version tags like v1.0.0, v1.0.0-beta.1

permissions:
  contents: read

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    environment: release  # Requires 'release' environment to be created in GitHub Settings > Environments
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev postgresql-client libpq-dev

    - name: Check code formatting
      run: make fmt-check

    - name: Run clippy
      run: make lint

    - name: Run tests
      run: make test-all

    - name: Verify package
      run: cargo package --allow-dirty

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Extract version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Verify version matches Cargo.toml
      run: |
        CARGO_VERSION=$(grep '^version =' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        TAG_VERSION="${{ steps.version.outputs.version }}"
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch! Cargo.toml has $CARGO_VERSION but tag is $TAG_VERSION"
          exit 1
        fi
        echo "✅ Version verification passed: $CARGO_VERSION"

    - name: Create release notes
      id: release-notes
      run: |
        # Extract changelog entries for this version
        if [ -f "CHANGELOG.md" ]; then
          # Extract content between version headers
          NOTES=$(sed -n "/^## \[${{ steps.version.outputs.version }}\]/,/^## \[/p" CHANGELOG.md)
          if [ -z "$NOTES" ]; then
            NOTES="Release ${{ steps.version.outputs.version }}"
          fi
        else
          NOTES="Release ${{ steps.version.outputs.version }}"
        fi
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.version }}
        body: ${{ steps.release-notes.outputs.notes }}
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
