name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        features: ["", "diesel-support", "sea-orm-support", "yaml-codegen-config"]
        exclude:
          # Reduce matrix size by testing only stable with features on ubuntu
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
          - os: macos-latest
            features: diesel-support
          - os: windows-latest
            features: diesel-support
          - os: macos-latest
            features: sea-orm-support
          - os: windows-latest
            features: sea-orm-support
          - os: macos-latest
            features: yaml-codegen-config
          - os: windows-latest
            features: yaml-codegen-config

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.features }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev postgresql-client libpq-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sqlite postgresql

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # SQLite is usually pre-installed on Windows
        # PostgreSQL would need to be installed separately if needed

    - name: Check code formatting
      run: make fmt-check

    - name: Run clippy
      run: make lint

    - name: Build
      run: make build

    - name: Run tests
      run: make test

    - name: Test documentation
      run: cargo test --doc ${{ matrix.features != '' && format('--features {0}', matrix.features) || '' }}

  audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: make audit

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: "1.86.0"  # MSRV - exact version to ensure consistency

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check MSRV compatibility
      run: make build

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate code coverage
      run: make coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: false
